{"version":3,"sources":["components/firebase.js","components/Project.js","components/Projects.js","components/ProjectDetails.js","components/Contact.js","components/Header.js","components/Login.js","components/Edit.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Project","props","className","data","defaultImage","src","alt","onClick","navigate","id","title","year","byline","signedIn","to","window","confirm","firestore","collection","doc","delete","then","ref","console","log","catch","error","Projects","useState","projects","setProjects","useEffect","orderBy","onSnapshot","snapshot","docs","add","timestamp","FieldValue","serverTimestamp","length","map","project","key","ProjectDetails","styles","setProject","prev","setPrev","next","setNext","get","array","myPos","indexOf","parallax","backgroundImage","height","width","backgroundAttachment","backgroundSize","display","placeItems","fontSize","color","style","description","parse","Contact","Header","show","setShow","size","getProps","isPartiallyCurrent","Login","provider","auth","GoogleAuthProvider","addScope","signInWithPopup","currentUser","displayName","photoURL","signOut","Edit","status","setStatus","imageName","setImageName","updateValue","e","persist","target","type","existingProject","name","checked","value","onSubmit","preventDefault","update","message","onChange","placeholder","htmlFor","defaultChecked","html","javascript","userOrientedDesign","ux","displayImage","hidden","accept","storageRef","storage","onUploadStart","onUploadError","onUploadSuccess","filename","child","getDownloadURL","url","onProgress","percentage","App","setSignedIn","onAuthStateChanged","user","default","path","process","URL","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4d17de38.chunk.js","sourcesContent":["import firebase from 'firebase'\n\nvar firebaseConfig = {\n    apiKey: \"AIzaSyB-a24M4sUt5I44K9-ll0C7lyoH0pmpMr0\",\n    authDomain: \"react-blog-firebase-3a7bc.firebaseapp.com\",\n    databaseURL: \"https://react-blog-firebase-3a7bc.firebaseio.com\",\n    projectId: \"react-blog-firebase-3a7bc\",\n    storageBucket: \"react-blog-firebase-3a7bc.appspot.com\",\n    messagingSenderId: \"221628049182\",\n    appId: \"1:221628049182:web:c5e12af6f7f4de5e168b0f\",\n    measurementId: \"G-0V6GB0QBCH\"\n  };\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig)\n\n  export default firebase","import React from 'react'\nimport './Project.css'\nimport { MdDelete } from \"react-icons/md\"\nimport { FaCode } from \"react-icons/fa\"\nimport firebase from './firebase'\nimport  { Link, navigate } from '@reach/router'\n\n\nconst Project = (props) => {\n\n    const deleteProject = () => {\n        if(window.confirm('sure?')){\n            firebase.firestore()\n                .collection('projects')\n                .doc(props.id)\n                .delete()\n                .then( ref => console.log('Document was deleted') )\n                .catch( error => console.log(error) )\n        }\n    }\n\n    return(\n        <div className='project'>\n            {\n                props.data.defaultImage &&\n                <img src={props.data.defaultImage} alt='default' />\n            }\n            <div onClick={ () => navigate('/projects/' + props.id) } className='project-display-content'>\n                <div>\n                    <h1>{props.data.title}</h1>\n                \n                    <div className='year'>\n                        {props.data.year}\n                    </div>\n                    <div className='byline'>\n                        {props.data.byline}\n                    </div>\n                </div>\n            </div>\n            {\n            props.signedIn &&\n            <div className='admin-icons'>\n                <Link to={'/edit/' + props.id}>\n                    <FaCode className='edit-icons' />\n                </Link>            \n                <MdDelete onClick={deleteProject} className='edit-icons' />\n            </div>\n            }\n        \n        </div>\n    )\n}\n\nexport default Project","import React,{ useState, useEffect } from 'react'\nimport firebase from './firebase'\nimport Project from './Project'\nimport './Projects.css'\nimport { IoIosAddCircle } from 'react-icons/io'\nimport {navigate} from '@reach/router'\nimport ClipLoader from \"react-spinners/ClipLoader\"\nimport Masonry from 'react-masonry-css'\n\nconst Projects = (props) => {\n    const [projects, setProjects] = useState([])\n    \n    useEffect( () => {\n        console.log('hejsa')\n        firebase\n        .firestore()\n        .collection('projects')\n        .orderBy('title')\n        .onSnapshot(\n            snapshot => setProjects(snapshot.docs)\n        )\n    }, [])\n\n    const addProject = () => {\n        firebase.firestore().collection('projects').add(\n            {\n                title:'0 New project',\n                timestamp: firebase.firestore.FieldValue.serverTimestamp()\n            }\n        )\n        .then( doc => navigate('/edit/' + doc.id) )\n    }\n\n    return(\n        <main className='projects'>\n            {\n                props.signedIn &&\n                <div className='add'>\n                    <IoIosAddCircle className='edit-icons' onClick={addProject} />\n                </div>\n            }\n\n            {\n            projects.length > 0\n            ?\n                <div className='projects-container'>\n                {\n                    projects.map(\n                        project => \n                        <Project \n                            key={project.id} \n                            data={project.data()} \n                            id={project.id} \n                            signedIn={props.signedIn}\n                        />\n                    )\n                }\n                </div>\n            :\n            <ClipLoader />\n            }\n        </main>\n    )\n}\n\nexport default Projects","import React, {useState, useEffect} from 'react'\nimport './Project.css'\nimport firebase from './firebase'\nimport  { Link } from '@reach/router'\nimport parse from 'html-react-parser'\nimport './ProjectDetails.css'\nimport { FaChevronCircleLeft, FaChevronCircleRight } from 'react-icons/fa'\n\nconst ProjectDetails = (props) => {\n\n    \n    const[project,setProject] = useState()\n    const[prev,setPrev] = useState()\n    const[next,setNext] = useState()\n\n\n    useEffect( () => {\n        firebase\n        .firestore()\n        .collection('projects')\n        .doc(props.id)\n        .onSnapshot(\n            snapshot => setProject(snapshot.data())\n        )\n        firebase\n        .firestore()\n        .collection('projects')\n        .orderBy('title')\n        .get()\n        .then( projects => {\n            const array = projects.docs.map( doc => doc.id)\n            const myPos = array.indexOf(props.id)\n            setNext( myPos + 1 === array.length ? array[0] : array[myPos + 1])\n            setPrev( myPos === 0 ? array[array.length - 1] : array[myPos - 1])\n        })\n    }, [props.id])\n\n\n    let styles\n    if(project){\n        styles = {\n            parallax:{                \n                backgroundImage: 'url(' + project.parallax + ')',\n                height:'100vh',\n                width:'100vw',\n                backgroundAttachment:'fixed',\n                backgroundSize:'cover',\n                display:'grid',\n                placeItems:'center',\n                fontSize:'2rem',\n                color:'white'\n            }\n        }\n    }\n\n    return(\n        <main className='project-details'>\n        {\n        project \n        ?    \n        <div>\n            <div className='pager'>\n                <Link to={'/projects/' + prev}><FaChevronCircleLeft className='edit-icons' /></Link>\n                <Link to={'/projects/' + next}><FaChevronCircleRight className='edit-icons' /></Link>\n            </div>\n\n            {\n                project.parallax &&\n                <div style={styles.parallax}>\n                    <h1>{project.title}</h1>\n                </div>\n            }\n\n            <div className='project-content'>\n                <h1>{project.title}</h1>           \n                <div className='year'>\n                    {project.year}\n                </div>\n                <div className='description'>\n                    {project.description && parse(project.description)}\n                </div>\n            </div>\n        </div>\n        :\n        <h2>Fetching project, hold on...</h2>\n        }\n        </main>\n    )\n}\n\nexport default ProjectDetails","import React from 'react'\n\nconst Contact = () => {\n    return(\n        <main>\n            <h1>Kontakt</h1>\n        </main>\n    )\n}\n\nexport default Contact","import React, {useState} from 'react'\nimport { Link } from '@reach/router'\nimport { MdMenu } from \"react-icons/md\"\nimport './Header.css'\n\nconst Header = ( props ) => {\n    console.log('header renders')\n\n    const [show,setShow] = useState(false)\n\n    const isPartiallyActive = ({\n        isPartiallyCurrent\n    }) => {\n        return isPartiallyCurrent\n        ? { className: 'active'}\n        : null\n    }\n\n    return(\n        <div className='header-container'>\n            <MdMenu className='burger' color='white' size='42' onClick={ () => setShow(!show) } />\n            <header className={ show ? 'visible' : ''} onClick={ () => setShow(false) }>\n                <Link getProps={isPartiallyActive} to='/projects'>projects</Link>\n                <Link to='/contact'>kontakt</Link>\n                <Link to='/login'>\n                    {\n                    props.signedIn \n                    ? 'profile'\n                    : 'login'\n                    }\n                </Link>\n            </header>        \n        </div>\n    )\n}\n\nexport default Header","import React from 'react'\nimport firebase from './firebase'\nimport './Login.css'\n\nconst Login = (props) => {\n    const loginWithGoogle = () => {\n        let provider = new firebase.auth.GoogleAuthProvider()\n        provider.addScope('profile')\n        provider.addScope('email')\n\n        firebase.auth()\n        .signInWithPopup(provider)\n            .catch( (error) => {\n                console.log(error)\n            } )\n    }\n    const logout = () => {\n        firebase.auth().signOut()\n    }\n    return(\n        <main className='login'>\n        {\n            !props.signedIn &&\n            <button onClick={loginWithGoogle}>sign in</button>\n        }\n        {\n            props.signedIn &&\n            <div>\n                <h1>You are signed in to firebase</h1>\n                <p>Welcome {firebase.auth().currentUser.displayName}</p>\n                {\n                    firebase.auth().currentUser.photoURL &&\n                    <img alt='profile img' src={firebase.auth().currentUser.photoURL} />\n                }\n                <button onClick={logout}>sign out</button>\n            </div>\n        }\n        </main>\n    )\n}\n\nexport default Login","import React, {useState, useEffect} from 'react'\nimport firebase from './firebase'\nimport './Edit.css'\nimport FileUploader from \"react-firebase-file-uploader\"\n\nconst Edit = (props) => {\n\n    const [project, setProject] = useState()\n    const [status,setStatus] = useState('')\n    const [imageName, setImageName] = useState('defaultImage')\n\n    useEffect( () => {\n        firebase.firestore().collection('projects').doc(props.id)\n        .onSnapshot( snapshot => \n            setProject( snapshot.data() )    \n        )\n    }, [props.id] )\n\n    const saveProject = (e) => {\n        setStatus('updating project, please hold')\n        e.preventDefault()\n        firebase.firestore().collection('projects').doc(props.id)\n            .update(project)\n            .then( () => setStatus('project updated') )\n            .catch( error => {console.log( error.message )} )\n    }\n\n    const updateValue = \n        e => {\n        e.persist()\n\n        switch(e.target.type){\n            case 'checkbox':{\n                console.log('her')\n                setProject( \n                    existingProject => ({\n                    ...existingProject,\n                    [e.target.name]: e.target.checked\n                }))\n                break;\n            }\n            case 'text':{\n                setProject( \n                    existingProject => ({\n                    ...existingProject,\n                    [e.target.name]: e.target.value\n                }))\n                break;\n            }\n            default:{\n                setProject( \n                    existingProject => ({\n                    ...existingProject,\n                    [e.target.name]: e.target.value\n                }))\n                break;\n            }\n        }\n    }\n    const uploadStart = () => {\n        setStatus('uploading image, please hold')\n    }\n    const uploadError = (error) => {\n        setStatus(error)\n    }\n    const handleProgress = (percentage) => {\n        console.log(percentage)\n    }\n\n    const uploadSuccess = filename => {\n        firebase\n            .storage()\n            .ref('images')\n            .child(filename)\n            .getDownloadURL()\n            .then(\n                url => setProject( existingProject => ( {\n                    ...existingProject,\n                    [imageName]: url\n                } ) )\n            )\n            setStatus('image uploaded')\n    }\n\n    return(\n        <main className='edit'>\n            {\n            project && \n            <>\n            <h1>Edit project: {project.title}</h1>\n            <form onSubmit={saveProject}>\n\n                <input name='title' onChange={updateValue} value={project.title} />\n                \n                <input name='year' onChange={updateValue} placeholder='year' value={project.year} />\n                <input name='byline' onChange={updateValue} placeholder='short description for the frontpage' value={project.byline} />\n\n                <div className='checks'>\n                    <label htmlFor='html'>html</label>\n                    <input name='html' id='html' type='checkbox' onChange={updateValue} defaultChecked={project.html}/>    \n\n                    <label htmlFor='javascript'>javascript</label>\n                    <input name='javascript' id='javascript' type='checkbox' onChange={updateValue} defaultChecked={project.javascript}/>    \n\n                    <label htmlFor='userOrientedDesign'>user oriented design</label>\n                    <input name='userOrientedDesign' id='userOrientedDesign' type='checkbox' onChange={updateValue} defaultChecked={project.userOrientedDesign}/>    \n\n                    <label htmlFor='ux'>UX</label>\n                    <input name='ux' id='ux' type='checkbox' onChange={updateValue} defaultChecked={project.ux}/>    \n                </div>                \n\n                <textarea onChange={updateValue} name='description' value={project.description} />\n\n\n            {\n                <div className='project-images'>\n                    {\n                        project.defaultImage &&\n                        <div>\n                            <img src={project.defaultImage} alt='default' />\n                            <h3>Default</h3>\n                        </div>\n\n                    }\n                    {\n                        project.displayImage &&\n                        <div>\n                            <img src={project.displayImage} alt='default' />\n                            <h3>Display</h3>\n                        </div>\n                    }\n                    {\n                        project.parallax &&\n                        <div>\n                            <img src={project.parallax} alt='default' />\n                            <h3>Parallax</h3>\n                        </div>\n                    }\n                </div>\n            }\n            \n            <select name='imageName' onChange={ e => setImageName(e.target.value) }>\n                <option name='defaultImage' value='defaultImage'>default image</option>\n                <option name='displayImage' value='displayImage'>display image</option>\n                <option name='parallax' value='parallax'>parallax image</option>\n            </select>\n\n            <label>\n            <div className='button'>upload</div>\n\n                <FileUploader\n                    hidden\n                    accept=\"image/*\"\n                    storageRef={firebase.storage().ref('images')}\n                    onUploadStart={uploadStart}\n                    onUploadError={uploadError}\n                    onUploadSuccess={uploadSuccess}\n                    onProgress={handleProgress}\n                    />\n                </label>\n\n                <button type='submit'>save</button>\n\n            </form>\n            </>\n            }\n            <p>{status}</p>\n        </main>\n    )\n}\n\nexport default Edit","import React, { useState, useEffect } from 'react'\nimport { Router, navigate } from '@reach/router'\nimport './App.css'\nimport Projects from './components/Projects'\nimport ProjectDetails from './components/ProjectDetails'\nimport Contact from './components/Contact'\nimport Header from './components/Header'\nimport Login from './components/Login'\nimport Edit from './components/Edit'\nimport firebase from './components/firebase'\n\nconst App = () => {\n  const [signedIn, setSignedIn] = useState(false)\n\n  useEffect( () => {\n    firebase.auth().onAuthStateChanged(\n      user => {\n        if(user){\n          setSignedIn(true)\n        }else{\n          setSignedIn(false)\n        }\n      }\n    )\n  })\n\n  return(\n    <div>\n      <Header signedIn={signedIn} />\n      <Router>\n        <Projects default signedIn={signedIn} path='/projects' />\n        <ProjectDetails path='/projects/:id' />\n        <Contact path='/contact' />\n        <Login signedIn={signedIn} setSignedIn={setSignedIn} path={process.env.URL + '/login'} />\n        <Edit path='/edit/:id' />\n      </Router>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}